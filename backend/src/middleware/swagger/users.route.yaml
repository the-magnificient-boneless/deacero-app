openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API documentation for the User Service
tags:
  - name: users
    description: Everything about users ⚠️ Auth Bearer token required!
paths:
  /users:
    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Create a new user
      description: Endpoint to create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Gregorio
                secondName:
                  type: string
                  example: Daniel
                lastName:
                  type: string
                  example: Ayar
                secondLastName:
                  type: string
                  example: López
                email:
                  type: string
                  format: email
                  example: admin@admin.com
                password:
                  type: string
                  format: password
                  example: password
                state:
                  type: string
                  example: Jalisco
                country:
                  type: string
                  example: México
                position:
                  type: string
                  example: Software Engineer
                description:
                  type: string
                  example: >
                    A skilled and versatile Software Engineer with a strong foundation in front-end and back-end development.
                    Proficient in modern web technologies, including HTML, CSS, JavaScript, and frameworks like React, Vue, and Angular, as well as server-side languages such as Node.js and Python.
                    Experienced in building responsive, user-centered applications and optimizing website performance for seamless user experiences.
                role:
                  type: integer
                  example: 0
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
